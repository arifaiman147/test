//server

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <time.h>

#define PORT 8080
#define MIN_RANGE 50000
#define MAX_RANGE 80000

int main() {
  int server_socket, client_socket;
  struct sockaddr_in server_address, client_address;
  socklen_t address_size;
  char buffer[1024];
  int random_number;

  // Create the server socket.
  server_socket = socket(AF_INET, SOCK_STREAM, 0);
  if (server_socket == -1) {
    perror("Error creating socket.\n");
    return 1;
  }

  // Bind the server socket to a port.
  server_address.sin_family = AF_INET;
  server_address.sin_port = htons(PORT);
  server_address.sin_addr.s_addr = INADDR_ANY;
  address_size = sizeof(server_address);
  if (bind(server_socket, (struct sockaddr *)&server_address, address_size) == -1) {
    perror("Error binding socket.\n");
    return 1;
  }

  // Listen for incoming connections.
  if (listen(server_socket, 5) == -1) {
    perror("Error listening.\n");
    return 1;
  }

  printf("Server listening on port %d\n", PORT);

  // Accept an incoming connection.
  client_socket = accept(server_socket, (struct sockaddr *)&client_address, &address_size);
  if (client_socket == -1) {
    perror("Error accepting connection.\n");
    return 1;
  }

  // Generate a random number.
  srand(time(NULL));
  random_number = (rand() % (MAX_RANGE - MIN_RANGE + 1)) + MIN_RANGE;

  // Send the random number to the client.
  sprintf(buffer, "%d", random_number);
  if (send(client_socket, buffer, strlen(buffer) + 1, 0) == -1) {
    perror("Error sending data.\n");
    return 1;
  }

  printf("Random number sent to the client: %d\n", random_number);

  // Close the client socket.
  close(client_socket);

  // Close the server socket.
  close(server_socket);

  return 0;
}


//client

#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

int main() {
  int client_socket;
  struct sockaddr_in server_address;
  socklen_t address_size;
  char buffer[1024];
  int random_number;

  // Create the client socket.
  client_socket = socket(AF_INET, SOCK_STREAM, 0);
  if (client_socket == -1) {
    printf("Error creating socket.\n");
    return 1;
  }

  // Connect to the server.
  server_address.sin_family = AF_INET;
  server_address.sin_port = htons(8080);
  server_address.sin_addr.s_addr = INADDR_ANY;
  address_size = sizeof(server_address);
  if (connect(client_socket, (struct sockaddr *)&server_address, address_size) == -1) {
    printf("Error connecting to server.\n");
    return 1;
  }

  // Receive the random number from the server.
  recv(client_socket, buffer, sizeof(buffer), 0);
  random_number = atoi(buffer);

  // Print the random number.
  printf("The random number is: %d\n", random_number);

  // Close the client socket.
  close(client_socket);

  return 0;
}


